package smarthouse.ui;

import smarthouse.devices.DeviceManager;
import smarthouse.devices.SmartDevice;
import smarthouse.engergy.Battery;
import smarthouse.engergy.EnergyManager;
import smarthouse.engergy.EnergySource;
import smarthouse.log.CustomLogger;

import java.awt.Image;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JPanel;

public class DeviceManagementUI extends javax.swing.JPanel{
	public static final Logger logger = CustomLogger.getLogger();
	
	//define 
		private EnergyManager energyManager;
		private DeviceManager deviceManager;
		private List<String> sourceNames;
		private String[] sourceList;
		private String fanDeviceName = "Fan 1";
		private SmartDevice fanDev = new SmartDevice("Living Room Fan", SmartDevice.EnergyType.DC);
		private SmartDevice coolerDev = new SmartDevice("Bedroom Cooler", SmartDevice.EnergyType.DC);
		private SmartDevice heaterDev = new SmartDevice("Living Room Heater", SmartDevice.EnergyType.AC);
	
	public DeviceManagementUI() throws IOException {
		emsInit();
        initComponents();
        scaleImage();
	}
	
	public void scaleImage() throws IOException{
        //String currentPath = new java.io.File(".").getCanonicalPath();
        ImageIcon iconFan = new ImageIcon(getClass().getResource("/smarthouse/ui/icons/fanon.png"));
        ImageIcon iconLightBulb = new ImageIcon(getClass().getResource("/smarthouse/ui/icons/light.png"));
        ImageIcon iconHeater = new ImageIcon(getClass().getResource("/smarthouse/ui/icons/heateron.png"));
        ImageIcon iconEnergy = new ImageIcon(getClass().getResource("/smarthouse/ui/icons/energy.png"));
        ImageIcon iconBackground = new ImageIcon(getClass().getResource("/smarthouse/ui/icons/smarthome2.jpg"));
        // scaling image fan
        Image imgFan = iconFan.getImage();
        Image imageScaleFan = imgFan.getScaledInstance(fan.getWidth(), fan.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon iconScaleFan = new ImageIcon(imageScaleFan);
        fan.setIcon(iconScaleFan);
        
        // scaling image light bulb
        Image imgLightBulb = iconLightBulb.getImage();
        Image imageScaleLightBulb = imgLightBulb.getScaledInstance(lightBulb.getWidth(), lightBulb.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon iconScaleLightBulb = new ImageIcon(imageScaleLightBulb);
        lightBulb.setIcon(iconScaleLightBulb);
        
        // scaling image heater
        Image imgHeater = iconHeater.getImage();
        Image imageScaleHeater = imgHeater.getScaledInstance(heater.getWidth(), heater.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon iconScaleHeater = new ImageIcon(imageScaleHeater);
        heater.setIcon(iconScaleHeater);
        
        // scaling image background
//        Image imgBackground = iconBackground.getImage();
//        Image imageScaleBackground = imgBackground.getScaledInstance(background.getWidth(), background.getHeight(), Image.SCALE_SMOOTH);
//        ImageIcon iconScaleBackground = new ImageIcon(imageScaleBackground);
//        background.setIcon(iconScaleBackground);
        
    }
	
	private void emsInit() {
    	// define DATA 
    	energyManager = EnergyManager.getInstance();
    	
    	// Create Engery Sources
		Battery battery1 = new Battery(100, 70);
		EnergySource powerBank = new EnergySource("Power Bank", EnergySource.EnergyType.BATTERY, battery1);

		Battery battery2 = new Battery(1000, 1);
		EnergySource solar = new EnergySource("Home Solar", EnergySource.EnergyType.SOLAR, battery2);

		EnergySource grid = new EnergySource("Grid Power", EnergySource.EnergyType.GRID);
		
		// Add energy sources to the EnergyManager
		energyManager.addEnergySource(powerBank);
		energyManager.addEnergySource(solar);
		energyManager.addEnergySource(grid);
    	
    	
    	//device manager
    	deviceManager = new DeviceManager();
    	
    	sourceNames = energyManager.getEnergySourceNames();
    	 
        sourceList = sourceNames.toArray(new String[sourceNames.size()]);
    	//tao device
    	
        deviceManager.addDevice(fanDev);
    	
    	
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

       
        
        deviceManagementPanel = new javax.swing.JPanel();
        fan = new javax.swing.JLabel();
        fanSource = new javax.swing.JComboBox<>();
        onFanButton = new javax.swing.JButton();
        offFanButton = new javax.swing.JButton();
        heater = new javax.swing.JLabel();
        heaterSource = new javax.swing.JComboBox<>();
        onHeaterButton = new javax.swing.JButton();
        offHeaterButton = new javax.swing.JButton();
        lightBulb = new javax.swing.JLabel();
        lightSource = new javax.swing.JComboBox<>();
        onLightButton = new javax.swing.JButton();
        offLightButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        labelFanRate = new javax.swing.JLabel();
        labelHeaterRate = new javax.swing.JLabel();
        labelFanConsum = new javax.swing.JLabel();
        labelLightRate = new javax.swing.JLabel();
        labelHeaterConsum = new javax.swing.JLabel();
        labelLightConsum = new javax.swing.JLabel();
        

        

        logger.info("debug");
        fan.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        fanSource.setModel(new javax.swing.DefaultComboBoxModel<>(sourceList));
        fanSource.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fanSourceActionPerformed(evt);
            }
        });

        onFanButton.setText("ON");
        onFanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onFanButtonActionPerformed(evt);
            }
        });

        offFanButton.setText("OFF");
        offFanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offFanButtonActionPerformed(evt);
            }
        });

        heater.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        heaterSource.setModel(new javax.swing.DefaultComboBoxModel<>(sourceList));

        onHeaterButton.setText("ON");
        onHeaterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onHeaterButtonActionPerformed(evt);
            }
        });

        offHeaterButton.setText("OFF");
        offHeaterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offHeaterButtonActionPerformed(evt);
            }
        });

        lightBulb.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        lightSource.setModel(new javax.swing.DefaultComboBoxModel<>(sourceList));

        onLightButton.setText("ON");
        onLightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onLightButtonActionPerformed(evt);
            }
        });

        offLightButton.setText("OFF");
        offLightButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                offLightButtonActionPerformed(evt);
            }
        });

        jLabel4.setBackground(new java.awt.Color(255, 255, 255));
        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel4.setText("Usage Rate");
        jLabel4.setOpaque(true);

        jLabel5.setBackground(new java.awt.Color(255, 255, 255));
        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel5.setText("Consumption");
        jLabel5.setOpaque(true);

        labelFanRate.setBackground(new java.awt.Color(255, 255, 255));
        labelFanRate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelFanRate.setText("Fan Rate:");
        labelFanRate.setOpaque(true);

        labelHeaterRate.setBackground(new java.awt.Color(255, 255, 255));
        labelHeaterRate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelHeaterRate.setText("Heater Rate:");
        labelHeaterRate.setOpaque(true);

        labelFanConsum.setBackground(new java.awt.Color(255, 255, 255));
        labelFanConsum.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelFanConsum.setText("Fan: ");
        labelFanConsum.setOpaque(true);

        labelLightRate.setBackground(new java.awt.Color(255, 255, 255));
        labelLightRate.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelLightRate.setText("Light Bulb Rate:");
        labelLightRate.setOpaque(true);

        labelHeaterConsum.setBackground(new java.awt.Color(255, 255, 255));
        labelHeaterConsum.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelHeaterConsum.setText("Heater:");
        labelHeaterConsum.setOpaque(true);

        labelLightConsum.setBackground(new java.awt.Color(255, 255, 255));
        labelLightConsum.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        labelLightConsum.setText("Light Bulb:");
        labelLightConsum.setOpaque(true);

        javax.swing.GroupLayout deviceManagementPanelLayout = new javax.swing.GroupLayout(deviceManagementPanel);
        deviceManagementPanel.setLayout(deviceManagementPanelLayout);
        deviceManagementPanelLayout.setHorizontalGroup(
            deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deviceManagementPanelLayout.createSequentialGroup()
                .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                            .addComponent(onLightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(12, 12, 12)
                            .addComponent(offLightButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lightBulb, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lightSource, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                            .addGap(59, 59, 59)
                            .addComponent(fan, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                            .addGap(59, 59, 59)
                            .addComponent(fanSource, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                            .addGap(33, 33, 33)
                            .addComponent(onFanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(12, 12, 12)
                            .addComponent(offFanButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 171, Short.MAX_VALUE)
                .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deviceManagementPanelLayout.createSequentialGroup()
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                                .addComponent(onHeaterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)
                                .addComponent(offHeaterButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(heater, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(heaterSource, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(182, 182, 182))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deviceManagementPanelLayout.createSequentialGroup()
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deviceManagementPanelLayout.createSequentialGroup()
                                .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(labelFanRate, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(labelHeaterRate, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(73, 73, 73))
                            .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                                .addComponent(labelLightRate, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(23, 23, 23)))
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelLightConsum, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelFanConsum, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelHeaterConsum, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(85, 85, 85))))
        );
        deviceManagementPanelLayout.setVerticalGroup(
            deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deviceManagementPanelLayout.createSequentialGroup()
                        .addComponent(heater, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(heaterSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onHeaterButton)
                            .addComponent(offHeaterButton)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, deviceManagementPanelLayout.createSequentialGroup()
                        .addComponent(fan, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addComponent(fanSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onFanButton)
                            .addComponent(offFanButton))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 125, Short.MAX_VALUE)
                .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lightBulb, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(18, 18, 18)
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFanRate)
                            .addComponent(labelFanConsum))))
                .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lightSource, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(onLightButton)
                            .addComponent(offLightButton)))
                    .addGroup(deviceManagementPanelLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labelHeaterRate)
                            .addComponent(labelHeaterConsum))
                        .addGap(18, 18, 18)
                        .addGroup(deviceManagementPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelLightRate)
                            .addComponent(labelLightConsum))))
                .addGap(64, 64, 64))
        );
        this.add(deviceManagementPanel);
        logger.info("Test");

        
//        pack();
    }// </editor-fold>//GEN-END:initComponents

    

    private void fanSourceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fanSourceActionPerformed
        // TODO add your handling code here:
//        String[] sourceName = {"Source 1", "Source 2", "Source 3", "Source 4"};
//        fanSource.setModel(new javax.swing.DefaultComboBoxModel<>(sourceName));
    }//GEN-LAST:event_fanSourceActionPerformed

    private void onFanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onFanButtonActionPerformed
        // TODO add your handling code here:
        int a = fanSource.getSelectedIndex();
        labelFanConsum.setText("Fan: " + a);
        labelFanRate.setText("Fan Rate: " + a);
        logger.info(String.format("Option value: %d", a));
        String sourceName = sourceList[a]; 
        String sourceID = energyManager.getEnergySourceIDByName(sourceName);
        deviceManager.getDeviceByID(fanDev.getDeviceId()).setEnergySourceID(sourceID);
        
        deviceManager.turnOnDevice(fanDev, false);
    }//GEN-LAST:event_onFanButtonActionPerformed

    private void offFanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offFanButtonActionPerformed
        // TODO add your handling code here:
    	deviceManager.turnOffDevice(fanDev);
    }//GEN-LAST:event_offFanButtonActionPerformed

    private void onHeaterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onHeaterButtonActionPerformed
        // TODO add your handling code here:
    	int a = heaterSource.getSelectedIndex();
//        labelFanConsum.setText("Fan: " + a);
//        labelFanRate.setText("Fan Rate: " + a);
        logger.info(String.format("Option value: %d", a));
        String sourceName = sourceList[a]; 
        String sourceID = energyManager.getEnergySourceIDByName(sourceName);
        deviceManager.getDeviceByID(heaterDev.getDeviceId()).setEnergySourceID(sourceID);
        
        deviceManager.turnOnDevice(heaterDev, false);
        
    }//GEN-LAST:event_onHeaterButtonActionPerformed

    private void offHeaterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offHeaterButtonActionPerformed
        // TODO add your handling code here:
    	deviceManager.turnOffDevice(heaterDev);
    }//GEN-LAST:event_offHeaterButtonActionPerformed

    private void onLightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onLightButtonActionPerformed
        // TODO add your handling code here:
        int a = lightSource.getSelectedIndex();
        logger.info(String.format("Option value: %d", a));
        String sourceName = sourceList[a]; 
        String sourceID = energyManager.getEnergySourceIDByName(sourceName);
        deviceManager.getDeviceByID(coolerDev.getDeviceId()).setEnergySourceID(sourceID);
        
        deviceManager.turnOnDevice(coolerDev, false);
    }//GEN-LAST:event_onLightButtonActionPerformed

    private void offLightButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_offLightButtonActionPerformed
        // TODO add your handling code here:
    	deviceManager.turnOffDevice(coolerDev);
    }//GEN-LAST:event_offLightButtonActionPerformed
    
    
 // Variables declaration - do not modify//GEN-BEGIN:variables
    
    private javax.swing.JLabel fan;
    private javax.swing.JComboBox<String> fanSource;
    private javax.swing.JLabel heater;
    private javax.swing.JComboBox<String> heaterSource;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel deviceManagementPanel;
    private javax.swing.JLabel labelFanConsum;
    private javax.swing.JLabel labelFanRate;
    private javax.swing.JLabel labelHeaterConsum;
    private javax.swing.JLabel labelHeaterRate;
    private javax.swing.JLabel labelLightConsum;
    private javax.swing.JLabel labelLightRate;
    private javax.swing.JLabel lightBulb;
    private javax.swing.JComboBox<String> lightSource;
    private javax.swing.JButton offFanButton;
    private javax.swing.JButton offHeaterButton;
    private javax.swing.JButton offLightButton;
    private javax.swing.JButton onFanButton;
    private javax.swing.JButton onHeaterButton;
    private javax.swing.JButton onLightButton;
    // End of variables declaration//GEN-END:variables

}
