package smarthouse.ui;

import javax.swing.*;
import java.util.logging.Logger;

import smarthouse.log.CustomLogger;

@SuppressWarnings("serial")
public class EnergySourceManagementUI extends JPanel {
    /**
     * Creates new form EnergySourceManagementUI
     */
    public EnergySourceManagementUI(EnergySource energySources) { //throws IOException {
        this.energySource = energySources;
    	initComponents();
    }
    
	EnergySource energySource;
	Logger logger = CustomLogger.getLogger();
	
	 /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {

        this.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        this.setMaximumSize(new java.awt.Dimension(1500, 1000));
        
        // 
    	for (int i=0; i<this.energySource.getList().length; i++) {
	        energySourcePanel[i] = new javax.swing.JPanel();
	        energySourceLabel[i] = new javax.swing.JLabel();
	        supplyAmountSource[i] = new javax.swing.JLabel();
	        remainingBarSource[i] = new javax.swing.JProgressBar();
	        remainingLabelSource[i] = new javax.swing.JLabel();
	        deviceComsumingSource[i] = new javax.swing.JLabel();
	        removeBtnSource[i] = new javax.swing.JButton();
	        chargeBtnSource[i] = new javax.swing.JButton();
	
	        energySourcePanel[i].setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2));
	        energySourcePanel[i].setName(""); // NOI18N
	
	        energySourceLabel[i].setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
	        energySourceLabel[i].setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
	        energySourceLabel[i].setText("Energy Source " + this.energySource.getList()[i]); // [FIXME] energySource.getName()
	        energySourceLabel[i].setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
	        energySourceLabel[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	
	        supplyAmountSource[i].setBackground(new java.awt.Color(255, 255, 255));
	        supplyAmountSource[i].setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	        supplyAmountSource[i].setText("Current supply amount: ");
	        supplyAmountSource[i].setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
	
	        // if pin battery or solar panel
	        remainingBarSource[i].setToolTipText("");
	        remainingBarSource[i].setValue((int)Math.round(100*Math.random()%100)); // [FIXME] getRemainingAmount
	        remainingBarSource[i].setStringPainted(true);
	
	        remainingLabelSource[i].setText("Remaining amount:");
	
	        deviceComsumingSource[i].setBackground(new java.awt.Color(255, 255, 255));
	        deviceComsumingSource[i].setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
	        deviceComsumingSource[i].setText("Being consumed by:");
	        deviceComsumingSource[i].setVerticalAlignment(javax.swing.SwingConstants.TOP);
	
	        final JButton removeBtn = new JButton();
	        removeBtn.setBackground(new java.awt.Color(255, 153, 153));
	        removeBtn.setText("Remove");
	        removeBtn.setName(Integer.toString(i));
	        removeBtn.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                removeBtnSourceActionPerformed(evt, Integer.parseInt(removeBtn.getName()));
	            }
	        });
	        removeBtnSource[i] = removeBtn;
	
	        // if pin battery or solar panel 
	        final JButton chargeBtn = new JButton();
	        chargeBtn.setText("Charge");
	        chargeBtn.setName(Integer.toString(i));
	        chargeBtn.addActionListener(new java.awt.event.ActionListener() {
	            public void actionPerformed(java.awt.event.ActionEvent evt) {
	                chargeBtnSourceActionPerformed(evt, Integer.parseInt(chargeBtn.getName()));
	            }
	        });
	        chargeBtnSource[i] = chargeBtn;
	
	        javax.swing.GroupLayout energySourcePanelLayout = new javax.swing.GroupLayout(energySourcePanel[i]);
	        energySourcePanel[i].setLayout(energySourcePanelLayout);
	        energySourcePanelLayout.setHorizontalGroup(
	            energySourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(energySourcePanelLayout.createSequentialGroup()
	                .addGroup(energySourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                    .addGroup(energySourcePanelLayout.createSequentialGroup()
	                        .addGap(10, 10, 10)
	                        .addGroup(energySourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	                            .addComponent(deviceComsumingSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addComponent(supplyAmountSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
	                            .addGroup(energySourcePanelLayout.createSequentialGroup()
	                                .addComponent(remainingLabelSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                                .addComponent(remainingBarSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE)
	                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
	                                .addComponent(chargeBtnSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))))
	                    .addGroup(energySourcePanelLayout.createSequentialGroup()
	                        .addGap(98, 98, 98)
	                        .addComponent(energySourceLabel[i], javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE)
	                        .addGap(18, 18, 18)
	                        .addComponent(removeBtnSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
	                .addContainerGap(14, Short.MAX_VALUE))
	        );
	        energySourcePanelLayout.setVerticalGroup(
	            energySourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
	            .addGroup(energySourcePanelLayout.createSequentialGroup()
	                .addContainerGap()
	                .addGroup(energySourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(energySourceLabel[i])
	                    .addComponent(removeBtnSource[i]))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
	                .addGroup(energySourcePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
	                    .addComponent(remainingLabelSource[i])
	                    .addComponent(remainingBarSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
	                    .addComponent(chargeBtnSource[i]))
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(supplyAmountSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
	                .addComponent(deviceComsumingSource[i], javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
	                .addContainerGap())
	        );
        
        	this.add(energySourcePanel[i]);
    	}

    	//
        javax.swing.GroupLayout energySourceMgmtPanelLayout = new javax.swing.GroupLayout(this);
        this.setLayout(energySourceMgmtPanelLayout);
        
        javax.swing.GroupLayout.ParallelGroup horizontalEvenGroup 	= energySourceMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false);
        javax.swing.GroupLayout.ParallelGroup horizontalOddGroup 	= energySourceMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false);
        for (int i=energySource.getList().length-1; i>=0; i--) {
        	if((i%2)==1) {
        		horizontalOddGroup.addComponent(energySourcePanel[i], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE);
        	} else {
        		horizontalEvenGroup.addComponent(energySourcePanel[i], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE);
        	}
        }
        energySourceMgmtPanelLayout.setHorizontalGroup(
            energySourceMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(energySourceMgmtPanelLayout.createSequentialGroup()
                .addContainerGap(20, Short.MAX_VALUE)
                	.addGroup(horizontalEvenGroup)
                .addGap(20, 20, 20)
                .addGroup(horizontalOddGroup)
                .addContainerGap(20, Short.MAX_VALUE))
        );
        
        javax.swing.GroupLayout.SequentialGroup verticalSeqGroup = energySourceMgmtPanelLayout.createSequentialGroup();
        javax.swing.GroupLayout.ParallelGroup[] verticalGroup = new javax.swing.GroupLayout.ParallelGroup[energySource.getList().length/2+1]; 
        for (int i=0; i<energySource.getList().length; i++) { 
        	if ((i%2)==0) verticalGroup[i/2] = energySourceMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false);
        	verticalGroup[i/2].addComponent(energySourcePanel[i], javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE);
        }
        verticalSeqGroup.addContainerGap(20, Short.MAX_VALUE);
        for (int i=0; i<energySource.getList().length; i++) { 
        	if ((i%2)==0) verticalSeqGroup.addGroup(verticalGroup[i/2]);
        	else if (i!=(energySource.getList().length-1)) verticalSeqGroup.addGap(20, 20, 20);
        }
        verticalSeqGroup.addContainerGap(20, Short.MAX_VALUE);
        energySourceMgmtPanelLayout.setVerticalGroup(
            energySourceMgmtPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(verticalSeqGroup)
        );
    }// </editor-fold>      
    	
//	public void updateEnergeySourceGUI() {
//		for (int i=0; i<energySources.length; i++) {
//			supplyAmountLabel[i].setText("Current Supply Amount: " + energySources[i].getB() + "kWh"); // getSupplyAmount
//			// if battery/panel
//			if (i>2) {
//	    		remainingPercentageLabel[i].setText("Remaining Percentage: " + energySources[i].getA() + "%"); // getRemainedAmount
//	    		deviceComsumingLabel[i].setText("<html>Being Consumed by <br> Device A <br> Device C</html>"); // getDevices
//	    		if (energySources[i].getA()>=100) {
//					chargeBtn[i].setText("Charge");
//				}
//			}
//		}
//		setSize(600, 200*energySources.length);
//	}
	
//	public void removeEnergySource(int index, EnergySource energySource) { //[FIXME] Last index and check value
//		int pos = 0;
//		EnergySource temp[] = new EnergySource[energySources.length-1];
//		for (int i=0; i<energySources.length; i++) {
//			if (i==index) continue;
//			temp[pos++] = energySources[i];
//		}
//		energySources = Arrays.copyOf(temp, temp.length);
//		getContentPane().remove(index);
//		updateEnergeySourceGUI();
//	}
	
//	public void addEnergySource() { // TODO
//		
//	}
    
    private void chargeBtnSourceActionPerformed(java.awt.event.ActionEvent evt, int index) {                                                 
        // TODO add your handling code here:
    	logger.info("Charge Button pressed " + index);
    }                                                

    private void removeBtnSourceActionPerformed(java.awt.event.ActionEvent evt, int index) {                                                 
        // TODO add your handling code here:
    	logger.info("Remove Button pressed " + index);
    }  
	
    // Variables declaration                  
    private javax.swing.JButton[] chargeBtnSource = new javax.swing.JButton[50];
    private javax.swing.JLabel[] deviceComsumingSource = new javax.swing.JLabel[50];
    private javax.swing.JLabel[] energySourceLabel = new javax.swing.JLabel[50];
    private javax.swing.JPanel[] energySourcePanel = new javax.swing.JPanel[50];
    private javax.swing.JLabel[] remainingLabelSource = new javax.swing.JLabel[50];
    private javax.swing.JProgressBar[] remainingBarSource = new javax.swing.JProgressBar[50];
    private javax.swing.JButton[] removeBtnSource = new javax.swing.JButton[50];
    private javax.swing.JLabel[] supplyAmountSource = new javax.swing.JLabel[50];
}
